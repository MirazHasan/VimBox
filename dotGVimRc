" Why even have a .gvimrc? Because some settings can only be set here for gui
" apps:
" https://vi.stackexchange.com/a/473
" For example t_vb, and application menus.
" Can add config support later.

" When overriding init files, the standard ones don't get sourced.
if ($VIMBOX_OVERRIDING_INIT)
  let g:vimBoxInitialVimRcPath = resolve(expand('<sfile>:p'))
  let g:vimBoxInstallationRoot = fnamemodify(g:vimBoxInitialVimRcPath, ':h')
  exec "source " . g:vimBoxInstallationRoot . "/VimBox.app/Contents/Resources/vim/gvimrc"
endif

if has('gui')
  if has("gui_macvim")

    " xxxxxx Required for Closer.vim()
    " Found a better way that doesnt require mapping this!
    " " macmenu &File.Close key=<nop>

    " Before:
    "  New Tab: CMD-t
    "  New Window: CMD-N
    "  Open Tab: CMD-T
    "  Show Errors: CMD-l
    " After:
    "  New Tab: CMD-n
    "  New Window: CMD-N
    "  Open Tab: No such thing
    "  Show Errors: unmapped
    macmenu &File.New\ Window key=<nop>
    macmenu &File.New\ Tab key=<nop>
    macmenu &Tools.List\ Errors key=<nop>
    " Clear this up for something like CMD+t
    macmenu &File.Open\ Tab\.\.\. key=<nop>
    macmenu &Tools.Make key=<nop>

    " Clear these up - if you want them back you can remap them
    " in Vim.
    macmenu &Edit.Find.Find\.\.\. key=<nop>
    macmenu &Edit.Find.Find\ Next key=<nop>
    macmenu &Edit.Find.Find\ Previous key=<nop>
    macmenu &Edit.Find.Use\ Selection\ for\ Find key=<nop>



    macmenu &File.New\ Window key=<D-N>
    if g:vimBox_tabSystem == 'wintabs' || 1
      " Let the vim keybindings handle it.
      macmenu &File.Close key=<nop>
      macmenu  Window.Select\ Next\ Tab	key=<nop>
      macmenu  Window.Select\ Previous\ Tab	key=<nop>
      macmenu Window.Toggle\ Full\ Screen\ Mode key=<D-CR>
    else
      macmenu &File.New\ Tab key=<D-n>
      macmenu Window.Toggle\ Full\ Screen\ Mode key=<D-c-f>
    endif


    " From subvim:
    " Disable print shortcut for 'goto anything...'
    macmenu File.Print key=<nop>

    " From subvim: Why do this again? Why not just swap like I've done?
    " create a new menu item with title "New File" and bind it to cmd+n 
    " new files will be created on a new tab
    " an 10.190 File.New\ File <nop>
    " macmenu File.New\ File action=addNewTab: key=<D-n>

  endif
endif

" Create the buffer menu (delete an existing one first).
func! s:VimBoxShow()
  " To the right of Edit.
  let  g:bmenu_priority=21
  " remove old menu, if exists; keep one entry to avoid a torn off menu to
  " disappear.
  silent! unmenu &Settings
  exe 'noremenu ' . g:bmenu_priority . ".1 &Settings.Dummy l"
  silent! unmenu! &Buffers

  " create new menu; set 'cpo' to include the <CR>
  let cpo_save = &cpo
  set cpo&vim
  exe 'an ' . g:bmenu_priority . ".2 &Settings.&UserSettings :execute 'e ' . g:vimBoxUserSettings<CR>"
  exe 'an ' . g:bmenu_priority . ".2 &Settings.&DefaultSettings :execute 'e ' . g:vimBoxSettingsDefault<CR>"
  macmenu &Settings.UserSettings key=<D-,>
  let &cpo = cpo_save
  unmenu &Settings.Dummy
endfunc

if has("vim_starting") && !has("gui_macvim")
  augroup LoadVimBoxMenu
    au! VimEnter * call <SID>VimBoxShow()
    au  VimEnter * au! LoadVimBoxMenu
  augroup END
else
  call <SID>VimBoxShow()
endif

set visualbell
set t_vb=

if file_readable(g:vimBoxUserGVimInit)
  execute "source " . g:vimBoxUserGVimInit
endif
