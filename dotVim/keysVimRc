"
"						*map-overview* *map-modes*
"
"   Overview of which map command works in which mode.  More details below.
"        COMMANDS                    MODES ~
"   :map   :noremap  :unmap     Normal, Visual, Select, Operator-pending
"   :nmap  :nnoremap :nunmap    Normal
"   :vmap  :vnoremap :vunmap    Visual and Select
"   :smap  :snoremap :sunmap    Select
"   :xmap  :xnoremap :xunmap    Visual
"   :omap  :onoremap :ounmap    Operator-pending
"   :map!  :noremap! :unmap!    Insert and Command-line
"   :imap  :inoremap :iunmap    Insert
"   :lmap  :lnoremap :lunmap    Insert, Command-line, Lang-Arg
"   :cmap  :cnoremap :cunmap    Command-line
"
"
"       COMMANDS				      MODES ~
"                  Normal  Visual+Select  Operator-pending ~
"   :map   :noremap   :unmap   :mapclear	 yes	    yes		   yes
"   :nmap  :nnoremap  :nunmap  :nmapclear	 yes	     -		    -
"   :vmap  :vnoremap  :vunmap  :vmapclear	  -	    yes		    -
"   :omap  :onoremap  :ounmap  :omapclear	  -	     -		   yes


" Attempt to configure PairUtils so that c-w deletes the pair.  Doesn't work!
" ===========================================================================
" function! s:insertMapping(from, functionToCallName, cmd, ...)
"   let args = []
"   for arg in a:000
"     call add(args, '"' . escape(arg, '"|') . '"')
"   endfor
"   exe 'inoremap <silent> <buffer> ' . a:from .  ' <C-R>=' . a:functionToCallName . '(' . join(args, ',') . ')<CR>' . a:cmd
" endfunction

" " We want c-w to have the same benefits as backspace when it makes sense.
" call s:insertMapping('<C-w>', 'jigsaw#Backspace', '')


" Command + Shift + h/j/k/l
" =========================
"
" - Cmd-Shift-h/l always move to left/right windows.
" - Cmd-Shift-J/K move to the up/down windows,
"   - Except in diff mode, where they move to the next change in diff
"     because in vertical diff mode you don't need to move up down.
"
" https://vi.stackexchange.com/questions/2705/create-mappings-that-only-apply-to-diff-mode


" TODO: Use <c-o> mappings for everything instead of <Esc> for insert
" mappings.
" http://vim.wikia.com/wiki/Use_Ctrl-O_instead_of_Esc_in_insert_mode_mappings

nnoremap <expr> <D-J> &diff ? ']c' : '<C-W>j'
nnoremap <expr> <D-K> &diff ? '[c' : '<C-W>k'
nmap <D-H> <c-w><c-h>
nmap <D-L> <c-w><c-l>


"totally annoying default mapping for cap k
nmap K <nop>


" Always gets out of autocomplete's and just lets you enter the newline!
imap <C-Cr> <Left><Right><Cr>

" ==== My favorite way of avoiding the escape key - feel free to delete all this
" == c-l escapes and saves, avoid the pinky stretch
vmap <C-l> <Esc><Cr>
imap <C-l> <Esc>l
map <c-l> <Esc>
"while selecting (for use in snippets c-l cancels out)
smap <C-l> <Esc>
" While commanding
cmap <C-l> <C-c>

" Also applies to other modal overlays constructed.
let g:playWellWithFuzzyFinder = 0

if g:playWellWithFuzzyFinder
  " For fuzzyfinder, c-c won't fire insert leave. yet we can't just map to
  " escape because c-c is more than just that - it also kills any jobs etc.
  imap <c-c> <esc>
endif


" NerdComment
" These two don't work - they trigger tab switching on space.
" vmap <D-/> <Leader>c<Space>
" nmap <D-/> <Leader>c<Space>
vmap <D-/> <Plug>NERDCommenterToggle
nmap <D-/> <Plug>NERDCommenterToggle


" == c-h always does the same as c-l but also saves.
vmap <C-h> <Esc><Cr>:w<Cr>
imap <C-h> <Esc>:w<Cr>l
map <c-h> <Esc>:w<Cr>
smap <C-h> <Esc>:w<Cr>
cmap <C-h> <C-c>:w<Cr>


imap <C-k> <space><Esc>Da
imap <C-j> <esc>Ji
" Unfortunately cannot distinguish ctrl-o and ctrl-O Neovim adds it though! In
" that case we would have the following bindings.
" imap <C-O> <Esc> O
" imap <C-o> <Esc> o

" Until NeoVim comes, we'll have these
imap <C-o> <Esc> O
imap <S-Enter> <End><Cr>


" Huge saver! Why do you need to press shift when executing a command?
nnoremap ; :

" fast scrolling using control when in command mode (keeping the j/k paradigm)
map <C-j> <C-d>
map <C-k> <C-u>

" Make S always delete until the point where you'd want to start typing -
" with some indent plugins, or settings the desired behavior is lost - this
" restores it. (Doesn't always work - looking for better solution)
nmap S ddO

" ==== Window and split navigation ===
"Tab through your splits! (Shift tab won't ever work on terminal :( )
set winwidth=1
nmap <Tab> <c-w><c-w>
nmap <s-Tab> <c-w><s-w>

" Terminal and windows mappings should perform the following:
" Read vim help manual from: vt100-function-keys* *xterm-function-keys*
" Do `:set termcap` from within a terminal vim to see what you need to
" configure iTerm with.  For example, if termcap says ^[[23;*~ is F11, have
" iTerm map a key combination like Shift+Space to "Send Escape Sequence" [23;*~
" Here's what iTerm reports as termcap from within Vim:


" t_#2 <S-Home>    ^[[1;2H     t_FJ <F29>       ^[[201~     t_PS <PasteStart> ^[[200~    t_k; <F10>       ^[[21;*~    t_kr <Right>     ^[O*C          <xHome>     ^[O*H
" t_#4 <S-Left>    ^[[1;2D     t_K1 <kHome>     ^[[1;*~     t_k1 <F1>        ^[[11;*~    t_kB <S-Tab>     ^[[Z        t_ku <Up>        ^[O*A          <zHome>     ^[[7;*~
" t_%1 <Help>      ^[[28;*~    t_K4 <kEnd>      ^[[4;*~     t_k2 <F2>        ^[[12;*~    t_kD <Del>       ^[[3~            <SgrMouse>  ^[[<*M         <xUp>       ^[[1;*A
" t_%i <S-Right>   ^[[1;2C     t_K6 <kPlus>     ^[O*k       t_k3 <F3>        ^[[13;*~    t_kI <Insert>    ^[[2;*~          <Mouse>     ^[[M           <xDown>     ^[[1;*B
" t_&8 <Undo>      ^[[26;*~    t_K7 <kMinus>    ^[O*m       t_k4 <F4>        ^[[14;*~    t_kN <PageDown>  ^[[6;*~          <xF1>       ^[O*P          <xLeft>     ^[[1;*D
" t_*7 <S-End>     ^[[1;2F     t_K8 <kDivide>   ^[O*o       t_k5 <F5>        ^[[15;*~    t_kP <PageUp>    ^[[5;*~          <xF2>       ^[O*Q          <xRight>    ^[[1;*C
" t_@7 <End>       ^[[1;*F     t_K9 <kMultiply> ^[O*j       t_k6 <F6>        ^[[17;*~    t_kb <BS>        ^?               <xF3>       ^[O*R          <kDel>      ^[[3;*~
" t_F1 <F11>       ^[[23;*~    t_KA <kEnter>    ^[O*M       t_k7 <F7>        ^[[18;*~    t_kd <Down>      ^[O*B            <xF4>       ^[O*S
" t_F2 <F12>       ^[[24;*~    t_KB <kPoint>    ^[O*n       t_k8 <F8>        ^[[19;*~    t_kh <Home>      ^[[1;*H          <xEnd>      ^[O*F
" t_FI <F28>       ^[[200~     t_PE <PasteEnd>  ^[[201~     t_k9 <F9>        ^[[20;*~    t_kl <Left>      ^[O*D            <zEnd>      ^[[8;*~


" Shift+Space <F11>
" Command+w <F6>
" Command+shift+w <F7>
" Command+n <F8>
" Command+s <F9>
" Command+Shift+t <SOME_other_F_key?>
" Command+\ <F3>
" Command+Shift+\ <F5>
" Command+Shift+c <F10>
" Command+Shift+u <Undo>
"


if exists('g:tabSystem') && g:tabSystem == 'wintabs'
  imap <silent>  <c-Tab> <Esc>:WintabsNext<Cr>
  imap <silent> <c-S-Tab> <Esc>:WintabsPrevious<Cr>
  nmap <silent> <c-Tab> :WintabsNext<Cr>
  nmap <silent> <c-S-Tab> :WintabsPrevious<Cr>

  map <silent> <c-Tab> <Esc>:WintabsNext<Cr>
  imap <silent> <c-S-Tab> <Esc>:WintabsPrevious<Cr>
  nmap <silent> <c-Tab> :WintabsNext<Cr>
  nmap <silent> <c-S-Tab> :WintabsPrevious<Cr>
  if exists("g:gui_oni") || has('gui') && has('mac') && has('gui_running')
    imap <silent>  <c-Tab> <Esc>:WintabsNext<Cr>
    imap <silent> <c-S-Tab> <Esc>:WintabsPrevious<Cr>
    nmap <silent> <c-Tab> :WintabsNext<Cr>
    nmap <silent> <c-S-Tab> :WintabsPrevious<Cr>

    map <silent> <c-Tab> <Esc>:WintabsNext<Cr>
    imap <silent> <c-S-Tab> <Esc>:WintabsPrevious<Cr>
    nmap <silent> <c-Tab> :WintabsNext<Cr>
    nmap <silent> <c-S-Tab> :WintabsPrevious<Cr>
    " By default the GUI will map these if not using wintabs.
    imap <silent> <D-}> <Esc> :WintabsNext<Cr>
    imap <silent> <D-{> <Esc> :WintabsPrevious<Cr>
    map <silent> <D-}> :WintabsNext<Cr>
    map <silent> <D-{> :WintabsPrevious<Cr>

    map  <silent> <D-1> :WintabsGo 1<Cr>
    imap <silent> <D-1> <Esc>:WintabsGo 1<Cr>
    map  <silent> <D-2> :WintabsGo 2<Cr>
    imap <silent> <D-2> <Esc>:WintabsGo 2<Cr>
    map  <silent> <D-3> :WintabsGo 3<Cr>
    imap <silent> <D-3> <Esc>:WintabsGo 3<Cr>
    map  <silent> <D-4> :WintabsGo 4<Cr>
    imap <silent> <D-4> <Esc>:WintabsGo 4<Cr>
    map  <silent> <D-5> :WintabsGo 5<Cr>
    imap <silent> <D-5> <Esc>:WintabsGo 5<Cr>
    map  <silent> <D-6> :WintabsGo 6<Cr>
    imap <silent> <D-6> <Esc>:WintabsGo 6<Cr>
    map  <silent> <D-7> :WintabsGo 7<Cr>
    imap <silent> <D-7> <Esc>:WintabsGo 7<Cr>
    map  <silent> <D-8> :WintabsGo 8<Cr>
    imap <silent> <D-8> <Esc>:WintabsGo 8<Cr>
    map  <silent> <D-9> :WintabsGo 9<Cr>
    imap <silent> <D-9> <Esc>:WintabsGo 9<Cr>

    " .gvimrc would have properly unmapped D-w from File menu.
    imap <silent> <D-w> <Esc>:WintabsClose<Cr>
    map <silent> <D-w> :WintabsClose<Cr>
    cmap <silent> <D-w> <Esc>:WintabsClose<Cr>
    smap <silent> <D-w> <Esc>:WintabsClose<Cr>
    imap <silent> <D-n> <Esc>:enew<Cr>
    map <D-n> :enew<Cr>


    " Toggle File Tree:
    " ------------------
    " Insert, Command-line, Lang-Arg
    lnoremap <silent> <special> <D-\> <Esc> :DoToggleExplorer <CR>
    " Normal
    nnoremap <silent> <special> <D-\> :DoToggleExplorer <CR>
    " Visual and Select
    vnoremap <silent> <special> <D-\> <Esc> :DoToggleExplorer <CR>
    " Operator pending
    onoremap <silent> <special> <D-\> <Esc> :DoToggleExplorer <CR>

    " Find In File Tree:
    " ------------------
    " Insert, Command-line, Lang-Arg
    lnoremap <silent> <special> <D-Bar> <Esc> :DoFindInExplorer <CR>
    " Normal
    nnoremap <silent> <special> <D-Bar> : DoFindInExplorer <CR>
    " Visual and Select
    vnoremap <silent> <special> <D-Bar> <Esc> : DoFindInExplorer <CR>
    " Operator pending
    onoremap <silent> <special> <D-Bar> <Esc> : DoFindInExplorer <CR>

    " Toggle Focus Between File Tree:
    " ------------------
    " Insert, Command-line, Lang-Arg
    lnoremap <silent> <special> <C-\> <Esc> :DoToggleExplorerFocus <CR>
    " Normal
    nnoremap <silent> <special> <C-\> : DoToggleExplorerFocus <CR>
    " Visual and Select
    vnoremap <silent> <special> <C-\> <Esc> : DoToggleExplorerFocus <CR>
    " Operator pending
    onoremap <silent> <special> <C-\> <Esc> : DoToggleExplorerFocus <CR>

  else
    " Can't get these mapped in terminals.
    " imap <silent> <M-}> <Esc> :WintabsNext<Cr>
    " imap <silent> <M-{> <Esc> :WintabsPrevious<Cr>
    " map <silent> <M-}> :WintabsNext<Cr>
    " map <silent> <M-{> :WintabsPrevious<Cr>

    " These control characters really slow down vim / terminal rendering.
    " map  <silent> ? :WintabsGo 1<Cr>
    " imap <silent> ? <Esc>:WintabsGo 1<Cr>
    " map  <silent> ? :WintabsGo 2<Cr>
    " imap <silent> ? <Esc>:WintabsGo 2<Cr>
    " map  <silent> ? :WintabsGo 3<Cr>
    " imap <silent> ? <Esc>:WintabsGo 3<Cr>
    " map  <silent> ? :WintabsGo 4<Cr>
    " imap <silent> ? <Esc>:WintabsGo 4<Cr>
    " map  <silent> ? :WintabsGo 5<Cr>
    " imap <silent> ? <Esc>:WintabsGo 5<Cr>
    " map  <silent> ? :WintabsGo 6<Cr>
    " imap <silent> ? <Esc>:WintabsGo 6<Cr>
    " map  <silent> ? :WintabsGo 7<Cr>
    " imap <silent> ? <Esc>:WintabsGo 7<Cr>
    " map  <silent> ? :WintabsGo 8<Cr>
    " imap <silent> ? <Esc>:WintabsGo 8<Cr>
    " map  <silent> ? :WintabsGo 9<Cr>
    " imap <silent> ? <Esc>:WintabsGo 9<Cr>

    " If you use iterm to map command+w to "Send Vim Keys" \<M-w> this is what
    " you get.
    imap <silent> <F6> <Esc>:WintabsClose<Cr>
    map <silent>  <F6> :WintabsClose<Cr>
    cmap <silent> <F6> <Esc>:WintabsClose<Cr>
    smap <silent> <F6> <Esc>:WintabsClose<Cr>

    imap <silent> <F7> <Esc>:qall<Cr>
    map <silent>  <F7> :qall<Cr>
    cmap <silent> <F7> <Esc>:qall<Cr>
    smap <silent> <F7> <Esc>:qall<Cr>

    imap <silent> <F8> <Esc>:enew<Cr>
    map <F8> :enew<Cr>
    imap <silent> <F9> <Esc>:w<Cr>
    map <F9> :w<Cr>

    " Toggle File Tree:
    " ------------------
    " Insert, Command-line, Lang-Arg
    lnoremap <silent> <special> <F3> <Esc> :DoToggleExplorer <CR>
    " Normal
    nnoremap <silent> <special> <F3> :DoToggleExplorer <CR>
    " Visual and Select
    vnoremap <silent> <special> <F3> <Esc> :DoToggleExplorer <CR>
    " Operator pending
    onoremap <silent> <special> <F3> <Esc> :DoToggleExplorer <CR>

    " Find In File Tree:
    " ------------------
    " Insert, Command-line, Lang-Arg
    lnoremap <silent> <special> <F5> <Esc> :DoFindInExplorer <CR>
    " Normal
    nnoremap <silent> <special> <F5> : DoFindInExplorer <CR>
    " Visual and Select
    vnoremap <silent> <special> <F5> <Esc> : DoFindInExplorer <CR>
    " Operator pending
    onoremap <silent> <special> <F5> <Esc> : DoFindInExplorer <CR>

    " Toggle Focus Between File Tree:
    " ------------------
    " Insert, Command-line, Lang-Arg
    lnoremap <silent> <special> <C-\> <Esc> :DoToggleExplorerFocus <CR>
    " Normal
    nnoremap <silent> <special> <C-\> : DoToggleExplorerFocus <CR>
    " Visual and Select
    vnoremap <silent> <special> <C-\> <Esc> : DoToggleExplorerFocus <CR>
    " Operator pending
    onoremap <silent> <special> <C-\> <Esc> : DoToggleExplorerFocus <CR>

  endif
else
  imap <c-Tab> <Esc>:tabnext<Cr>
  imap <c-S-Tab> <Esc>:tabprev<Cr>
  nmap <c-Tab> :tabnext<Cr>
  nmap <c-S-Tab> :tabprev<Cr>
  if exists("g:gui_oni") || has('gui') && has('mac') && has('gui_running')
    map  <D-1> 1gt
    imap <D-1> <Esc>1gt
    map  <D-2> 2gt
    imap <D-2> <Esc>2gt
    map  <D-3> 3gt
    imap <D-3> <Esc>3gt
    map  <D-4> 4gt
    imap <D-4> <Esc>4gt
    map  <D-5> 5gt
    imap <D-5> <Esc>5gt
    map  <D-6> 6gt
    imap <D-6> <Esc>6gt
    map  <D-7> 7gt
    imap <D-7> <Esc>7gt
    map  <D-8> 8gt
    imap <D-8> <Esc>8gt
    map  <D-9> 9gt
    imap <D-9> <Esc>9gt
  else
    imap <silent> <F9> <Esc>:w<Cr>
    map <F9> :w<Cr>
  endif
endif

if exists('g:tabSystem') && g:tabSystem == 'wintabs'
else
endif

if exists('g:tabSystem') && g:tabSystem == 'wintabs'
else
endif

if exists('g:tabSystem') && g:tabSystem == 'wintabs'
else
endif

if exists("g:gui_oni") || has('gui') && has('mac') && has('gui_running')
  nnoremap <D-U> :GundoToggle<CR>
else
  nnoremap <Undo> :GundoToggle<CR>
endif

if exists('g:tabSystem') && g:tabSystem == 'wintabs'
  " space through your tabs!
  map <silent> <Space> :WintabsNext<Cr>
  if exists("g:gui_oni") || has('gui') && has('mac') && has('gui_running')
    map <silent> <s-Space> :WintabsPrevious<Cr>
  else
    " shift-space backwards - doesn't work on terminal. Use terminal config to
    " map to <F11>.
    " You'd be surprised how often you type shift+space in insert mode only
    " intending to insert a space. We can fix it for Vim, but then what about
    " when not in vim?
    " map <silent> <F11> :WintabsPrevious<Cr>
    " imap <silent> <F11> <Space>
    " cmap <silent> <F11> <Space>
  endif
else
  " space through your tabs!
  map <Space> gt
  if exists("g:gui_oni") || has('gui') && has('mac') && has('gui_running')
    " shift-space backwards - doesn't work on terminal, I believe
    map <s-Space> gT
  else
    " See note about F11
  endif
endif


imap <D->> <Esc>:vertical resize +10<CR>
imap <D->> <Esc>:vertical resize +10<CR>
nmap <D->> :vertical resize +10<CR>
nmap <D-<> :vertical resize -10<CR>

" UltiSnips
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

" If it's open then just close it else, open it then jump back to prev window.
" NERDTree's default toggle behavior doesn't work like this.  This should also
" work if the explorer was opened with NERDTreeFind
" Toggle doesn't change the working directory of the nerd tree.
function ToggleExplorer()
  if exists(":NERDTree")
    let g:VimSplitBalancerSupress=1
    " Need finally to restore split balancer.
    try
      " If open
      if exists("t:NERDTreeBufName") && (bufwinnr(t:NERDTreeBufName) != -1)
        execute "NERDTreeToggle"
      else
        execute "NERDTreeToggle"
        wincmd p
      endif
    finally
      let g:VimSplitBalancerSupress=0
    endtry
  endif
endfunction

command -nargs=* DoToggleExplorer :call ToggleExplorer(<f-args>)

" If it's open then just close it else, open it then jump back to prev window.
" NERDTree's default toggle behavior doesn't work like this.  This should also
" work if the explorer was opened with NERDTreeFind
function FindInExplorer()
  if exists(":NERDTree")
    let g:VimSplitBalancerSupress=1
    " Need finally to restore split balancer.
    try
      execute "NERDTreeFind"
    finally
      let g:VimSplitBalancerSupress=0
    endtry
  endif
endfunction

command -nargs=* DoFindInExplorer :call FindInExplorer(<f-args>)

function ToggleExplorerFocus()
    lnoremap <silent> <special> <C-\> <Esc> : let g:VimSplitBalancerSupress=1 <Bar> if &filetype ==# 'nerdtree' <Bar> wincmd p <Bar> else <Bar> NERDTreeFocus <Bar> endif <Bar> let g:VimSplitBalancerSupress=0 <CR>
  if exists(":NERDTree")
    let g:VimSplitBalancerSupress=1
    " Need finally to restore split balancer.
    try
      if &filetype ==# 'nerdtree'
        wincmd p
      else
        execute "NERDTreeFocus"
      endif
    finally
      let g:VimSplitBalancerSupress=0
    endtry
  endif
endfunction

command -nargs=* DoToggleExplorerFocus :call ToggleExplorerFocus(<f-args>)


" NERDTree
" =========
" Regular NERDTree bindings (not the NERDTreeTabs bindings)
" https://stackoverflow.com/questions/23891006/how-to-set-the-cursor-focus-after-toggling-the-nerdtree-in-vim
if has("gui_running")
  if has("gui_macvim")
  endif
endif


" Diagnostics.
" Quick global shortcuts for toggling the location list or quickfix list
nmap <script> <silent> <D-d> :call Toggly(1)<CR>
nmap <script> <silent> <D-D> :call Toggly(0)<CR>

" http://vim.wikia.com/wiki/Get_shortened_messages_from_using_echomsg
function! s:ShortEcho(msg)
  let saved=&shortmess
  set shortmess+=T
  exe "norm :echomsg a:msg\n"
  let &shortmess=saved
endfunction
function! s:ShortError(msg)
  echohl Error
  let saved=&shortmess
  set shortmess+=T
  exe "norm :echomsg a:msg\n"
  let &shortmess=saved
  echohl none
endfunction

" From answer here: https://vi.stackexchange.com/questions/1942/how-to-execute-shell-commands-silently
fun! s:RunCmdOrShowErrorNicely(cmd)
    silent let f = systemlist(a:cmd)
    if v:shell_error
      call s:ShortError("[ERROR]" . join(f, '   '))
      return
    endif
endfun

command! -nargs=+ RunCmdOrShowErrorNicelyCmd call s:RunCmdOrShowErrorNicely(<q-args>)
nmap <script> <silent> <D-r> :RunCmdOrShowErrorNicelyCmd ./runFromEditor.sh<CR>
" nmap <script> <silent> <D-R> :RunCmdOrShowErrorNicelyCmd ./runFromEditor.sh

" Clear all forms of highlight when escape is pressed in normal mode.
" Accounts for strange terminal behavior.
"
" http://stackoverflow.com/questions/11940801/mapping-esc-in-vimrc-causes-bizzare-arrow-behaviour
function! UnhighlightMerlinIfDefined()
  if exists(":MerlinClearEnclosing")
    execute "MerlinClearEnclosing"
  endif
endfunction

if executable('ocamlmerlin')
  map <D-l> :MerlinLocate<CR>
  imap <D-l> <Esc>l:MerlinLocate<CR>
endif

" Command Shift C triggers reformatting, like Nuclide.
if exists("g:gui_oni") || has('gui') && has('mac') && has('gui_running')
  autocmd FileType reason map <buffer> <D-C> :ReasonPrettyPrint<Cr>
else
  autocmd FileType reason map <buffer> <F10> :ReasonPrettyPrint<Cr>
endif



command -nargs=* DoUnhighlightEverything :call UnhighlightMerlinIfDefined(<f-args>)
if has('gui_running')
  nnoremap <silent> <esc>  :nohlsearch<return>:DoUnhighlightEverything<return><esc>
else
  " code from above
  " Still leaves strange characters in terminal when hitting arrow keys in
  " normal mode!
  " augroup no_highlight
  "   autocmd TermResponse * nnoremap <silent> <esc> :nohlsearch<return>:DoUnhighlightEverything<return><esc>
  " augroup END
end


" Alphabetize on F5
vmap <F5> :sort ui<Cr>


" Unfortunately the default `<c-c>` won't cause fuf to exit or cancel a search.
if g:playWellWithFuzzyFinder
  " For fuzzyfinder, c-c won't fire insert leave. yet we can't just map to
  " escape because c-c is more than just that - it also kills any jobs etc.
  imap <c-c> <esc>
endif

"Emacs keybindings while inserting.
" =================================

"We can't map `<c-a>` to `<Esc>I` because that causes leaving of insert mode
"and that screws up plugins. Instead we use c-o which allows one normal
"movement without ever leaving insert mode! We should probably use that
"everywhere. Unfortunately, that doesn't work with fuzzy finder, so we have to
"use a *worse* behavior (home, as opposed to first non-whitespace char.)
if g:playWellWithFuzzyFinder
  imap <C-a> <home>
else
  " Uses noremap because we already have c-o mapped.
  " Hmmmm, this doesn't work - ends up inserting ^ characters sometimes.
  inoremap <C-a> <c-o>^
endif

map! <c-e> <End>
map! <c-f> <Right>
map! <c-b> <Left>
map! <c-d> <Delete>
noremap! <c-n> <Down>
noremap! <c-p> <Up>
inoremap <c-g> <c-p>

" Command line (Need to map these once more for inc-search to work).
cmap <c-a> <Home>
cmap <c-e> <End>
cmap <c-f> <Right>
cmap <c-b> <Left>
cmap <c-d> <Delete>


" TODO: Put this in customFunctions.vim
function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
nmap <D-M> :call Preserve("normal gg=G")<CR>

" Rename complete word in file
nnoremap <expr> <c-s> ':%s/\<'.expand('<cword>').'\>/'.expand('<cword>').'/g<Left><Left>'


" auto change directory of file. (really nice, but not always wanted)
" autocmd BufEnter * execute "chdir ".escape(expand("%:p:h"), ' ')
if has("gui_running") " all this for gui use
    "set number
    if has("gui_macvim")
        " =====================================================================
        " Macy key bindings.
        " =====================================================================
        " macmenu Window.Toggle\ Full\ Screen\ Mode key=<D-CR>
        " This is bound in ~/.vim/.bundlesVimRc
        " http://lifehacker.com/5280456/hide-your-mac-menu-bar-and-dock-for-a-cleaner-desktop

        " Since it makes sense to make c-d match the mac ox/emacs style forward
        " delete, c-d can't be (shift left in insert mode). Given that, we can
        " make a better mac os x combo for indenting and unindenting in insert
        " mode. That frees up c-t
        inoremap <D-]> <c-t>
        inoremap <D-[> <c-d>

        " Awesome visual selection maintained when indenting.
        vmap <D-]> >gv
        vmap <D-[> <gv
        " Map Command-# to switch tabs

        " Some Textmatey Shortcuts:
        imap <D-S-Enter> <End>;<Cr>
        imap <D-A> <End>;

        " Toggle Spell Check Easily:
        " Need to find a better replacement:
        " imap <D-P> <Esc>l:set spell!<Cr>
        " nmap <D-P> :set spell!<Cr>

        " Toggle between (Previously Viewed) tab.
        map <D-P> :LastTab<CR>
        imap <D-P> <Esc>:LastTab<CR>

        " Look at other deeply integrated mappings in the ~/.gvimrc file.
        map <D-T> <Esc>:Undoquit<CR>

    endif
    if has('gui_win32')
      " space through your tabs!
      map <M-}> gt
      " shift-space backwards - doesn't work on terminal, I believe
      map <M-{> gT
      imap <M-}> <Esc>gt
      " shift-space backwards - doesn't work on terminal, I believe
      imap <M-{> <Esc>gT

      nmap <F13> :q<Cr>
      imap <F13> <Esc>:q<Cr>
      nmap <F14> :qall<Cr>
      imap <F14> <Esc>:qall<Cr>
      nmap <F17> :tabnew<Cr>
      imap <F17> <Esc> :tabnew<Cr>
      vmap <F17> <Esc> :tabnew<Cr>
      nmap <F16> :w<Cr>
      imap <F16> <Esc>:w<Cr>l
      vmap <F16> <Esc>:w<Cr>
      " Look at other deeply integrated mappings in the ~/.gvimrc file.
      map <F18> <Esc>:Undoquit<CR>
    endif
else
endif


" vim-surround config
" Simply select visual ranges, then press any of the surround characters to
" automatically surround them.
vmap ( S(
vmap ) S)
vmap [ S[
vmap ] S]
vmap ' S'
" vmap " S"
" vmap * S*
vmap ` S`
